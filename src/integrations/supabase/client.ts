
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ikbnplncntfftvghvrgv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlrYm5wbG5jbnRmZnR2Z2h2cmd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwMTgzNjksImV4cCI6MjA2MjU5NDM2OX0.FkLD3r3AKKRcceuQGJ1lmEdyqkg--LxInfbbXd0h9OU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      storage: localStorage
    },
    // Improved realtime configuration
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    global: {
      headers: {
        'x-application-name': 'admin-portal'
      },
    },
    db: {
      schema: 'public'
    }
  }
);

// Helper function to check if the auth session is still valid
export const isSessionValid = async (): Promise<boolean> => {
  const { data } = await supabase.auth.getSession();
  return !!data.session;
};

// Helper function to preload agent data into localStorage (used on login/signup)
export const preloadAgentData = async (userId: string): Promise<boolean> => {
  try {
    // First try to load from user_selected_agent table (new table)
    const { data: selectedAgentData, error: agentError } = await supabase
      .from('user_selected_agent')
      .select('nickname, selected_agent_id, ai_agents!inner(*)')
      .eq('user_id', userId)
      .single();
      
    if (!agentError && selectedAgentData) {
      const agentData = {
        id: selectedAgentData.selected_agent_id,
        name: selectedAgentData.ai_agents?.name || "",
        image: selectedAgentData.ai_agents?.image || "",
        nickname: selectedAgentData.nickname || "Amor"
      };
      
      localStorage.setItem("selectedAgent", JSON.stringify(agentData));
      console.log("Agent data preloaded from user_selected_agent:", agentData);
      return true;
    }
    
    // Fallback to user_agent_selections table (legacy)
    const { data: legacyData, error: legacyError } = await supabase
      .from('user_agent_selections')
      .select('nickname, agent_id, agents!inner(*)')
      .eq('user_id', userId)
      .single();
      
    if (!legacyError && legacyData) {
      const agentData = {
        id: legacyData.agent_id,
        name: legacyData.agents?.name || "",
        image: legacyData.agents?.image || "",
        nickname: legacyData.nickname || "Amor"
      };
      
      localStorage.setItem("selectedAgent", JSON.stringify(agentData));
      console.log("Agent data preloaded from user_agent_selections:", agentData);
      return true;
    }

    console.log("No agent data found for user:", userId);
    return false;
  } catch (error) {
    console.error("Error preloading agent data:", error);
    return false;
  }
};
